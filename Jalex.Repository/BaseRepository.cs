using System;
using System.Collections.Generic;
using System.Linq;
using Jalex.Infrastructure.Logging;
using Jalex.Infrastructure.Objects;
using Jalex.Infrastructure.ReflectedTypeDescriptor;
using Jalex.Infrastructure.Repository;
using Jalex.Logging;
using Jalex.Repository.IdProviders;
using Magnum;

namespace Jalex.Repository
{
    public abstract class BaseRepository<T>
    {
        // ReSharper disable once StaticFieldInGenericType
        private static readonly ILogger _staticLogger = LogManager.GetCurrentClassLogger();
        private ILogger _instanceLogger;

        // ReSharper disable StaticFieldInGenericType
        private static bool _isInitialized; // one per T
        private static readonly object _syncRoot = new object();
        // ReSharper restore StaticFieldInGenericType

        protected readonly IReflectedTypeDescriptor<T> _typeDescriptor;
        protected readonly IIdProvider _idProvider;

        public ILogger Logger
        {
            get { return _instanceLogger ?? _staticLogger; }
            set { _instanceLogger = value; }
        }

        protected BaseRepository(
            IIdProvider idProvider,
            IReflectedTypeDescriptorProvider typeDescriptorProvider)
        {
            Guard.AgainstNull(idProvider, "idProvider");
            Guard.AgainstNull(typeDescriptorProvider, "typeDescriptorProvider");

            _idProvider = idProvider;
            _typeDescriptor = typeDescriptorProvider.GetReflectedTypeDescriptor<T>();            
        }

        protected IEnumerable<OperationResult<Guid>> createResults(
            WriteMode writeMode,
            IReadOnlyCollection<T> objects,
            Func<Guid, bool> doesObjectWithIdExist,
            Func<T, bool> actualAdd)
        {
            ensureObjectIds(writeMode, objects);

            return (from obj in objects 
                    let id = _typeDescriptor.GetId(obj) 
                    select createResult(writeMode, doesObjectWithIdExist, actualAdd, id, obj))
                    .ToList();
        }

        protected void ensureObjectIds(WriteMode writeMode, IEnumerable<T> objects)
        {
            HashSet<Guid> ids = new HashSet<Guid>();

            foreach (var obj in objects)
            {
                Guid id = _typeDescriptor.GetId(obj);

                if (id == Guid.Empty && writeMode == WriteMode.Update)
                {
                    throw new InvalidOperationException("Cannot update entity with empty id");
                }

                if (_typeDescriptor.IsIdAutoGenerated)
                {
                    id = checkOrGenerateIdForEntity(id, obj);
                }

                // skip dupe check if there are clustered indices
                if (!_typeDescriptor.HasClusteredIndices && !ids.Add(id))
                {
                    throw new DuplicateIdException("Attempting to create multiple objects with id " + id + " is not allowed");
                }
            }
        }

        private OperationResult<Guid> createResult(WriteMode writeMode, Func<Guid, bool> doesObjectWithIdExist, Func<T, bool> actualAdd, Guid id, T newObj)
        {
            OperationResult<Guid> failedResult;
            // ReSharper disable once ConvertIfStatementToConditionalTernaryExpression
            if (!checkIfCanWrite(writeMode, id, doesObjectWithIdExist, out failedResult))
            {
                return failedResult;
            }
            try
            {
                if (actualAdd(newObj))
                {
                    return new OperationResult<Guid>(true, id);
                }
                return new OperationResult<Guid>(
                                false,
                                id,
                                Severity.Warning,
                                string.Format("Failed to save {0} {1}", _typeDescriptor.TypeName, id));
            }
            catch (Exception e)
            {
                Logger.ErrorException(e, "Failed to save (mode={0}) {1} (id={2})", writeMode, _typeDescriptor.TypeName, id);
                return new OperationResult<Guid>(
                                false,
                                id,
                                Severity.Error,
                                string.Format("Failed to add save {0} (id={1})", _typeDescriptor.TypeName, id));

            }
        }

        private bool checkIfCanWrite(WriteMode writeMode, Guid id, Func<Guid, bool> doesObjectWithIdExist, out OperationResult<Guid> failedResult)
        {
            switch (writeMode)
            {
                case WriteMode.Insert:

                    if (id != Guid.Empty && doesObjectWithIdExist(id))
                    {
                        string message = string.Format("{0} with id {1} already exists", _typeDescriptor.TypeName, id);
                        failedResult = new OperationResult<Guid>(false, id, Severity.Error, message);
                        Logger.Warn(message);
                        return false;
                    }
                    break;
                case WriteMode.Update:
                    if (id == Guid.Empty || !doesObjectWithIdExist(id))
                    {
                        string message = string.Format("{0} with id {1} does not exist", _typeDescriptor.TypeName, id);
                        failedResult = new OperationResult<Guid>(false, id, Severity.Error, message);
                        Logger.Warn(message);
                        return false;
                    }
                    break;
                case WriteMode.Upsert:
                    // nothing to check
                    break;
                default:
                    throw new ArgumentOutOfRangeException("writeMode");
            }

            failedResult = null;
            return true;
        }

        private Guid checkOrGenerateIdForEntity(Guid id, T newObj)
        {
            if (id == Guid.Empty)
            {
                Guid generatedId = _idProvider.GenerateNewId();
                _typeDescriptor.SetId(newObj, generatedId);
                id = generatedId;
            }
            else if (!_idProvider.IsIdValid(id))
            {
                throw new IdFormatException(id + " is not a valid identifier (validated using " + _idProvider.GetType().Name + ")");
            }

            return id;
        }

        protected virtual void Initialize()
        {
            // no-op in base
        }

        protected void ensureInitialized()
        {
            if (!_isInitialized)
            {
                lock (_syncRoot)
                {
                    if (!_isInitialized)
                    {                        
                        Initialize();
                        _isInitialized = true;
                    }
                }
            }
        }
    }
}
