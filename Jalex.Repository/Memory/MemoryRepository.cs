using System;
using System.Collections.Concurrent;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using Jalex.Infrastructure.Objects;
using Jalex.Infrastructure.Repository;
using Jalex.Infrastructure.Utils;
using Jalex.Repository.IdProviders;
using Jalex.Repository.Utils;

namespace Jalex.Repository.Memory
{
    public class MemoryRepository<T> : BaseRepository, IQueryableRepository<T> where T : class
    {
        private readonly IIdProvider _idProvider;
        private readonly ConcurrentDictionary<string, T> _objectDictionary;
        private static readonly ReflectedTypeDescriptor<T> _typeDescriptor;

        static MemoryRepository()
        {
            _typeDescriptor = new ReflectedTypeDescriptor<T>();
        }

        public MemoryRepository(IIdProvider idProvider)
        {
            _idProvider = idProvider;
            _objectDictionary = new ConcurrentDictionary<string, T>();
        }

        #region Implementation of IReader<out T>

        public IEnumerable<T> GetByIds(IEnumerable<string> ids)
        {
            ParameterChecker.CheckForVoid(() => ids);

            foreach (var id in ids)
            {
                T obj;
                if (_objectDictionary.TryGetValue(id, out obj))
                    yield return obj;
            }
        }

        public IEnumerable<T> GetAll()
        {
            var objects = _objectDictionary.Values.ToArray();
            return objects;
        }

        #endregion

        #region Implementation of IDeleter<T>

        public IEnumerable<OperationResult> Delete(IEnumerable<string> ids)
        {
            ParameterChecker.CheckForVoid(() => ids);

            foreach (var id in ids)
            {
                T obj;
                bool success = _objectDictionary.TryRemove(id, out obj);
                yield return new OperationResult(success);
            }
        }

        #endregion

        #region Implementation of IUpdater<in T>

        public IEnumerable<OperationResult> Update(IEnumerable<T> objectsToUpdate)
        {
            ParameterChecker.CheckForVoid(() => objectsToUpdate);

            List<OperationResult> results = new List<OperationResult>();

            foreach (var objectToUpdate in objectsToUpdate)
            {
                OperationResult result;

                string id = _typeDescriptor.GetId(objectToUpdate);

                if (string.IsNullOrEmpty(id))
                {
                    result = new OperationResult(false, new Message(Severity.Warning, string.Format("Could not update {0} because it has no ID", objectToUpdate)));
                }
                else
                {

                    T entity = this.GetById(id);

                    if (entity == null)
                    {
                        result = new OperationResult(false,
                                                     new Message(Severity.Warning,
                                                                 string.Format("Could not update {0} because it was not found",
                                                                               objectToUpdate)));
                    }
                    else
                    {
                        var mapper = EmitMapper.ObjectMapperManager.DefaultInstance.GetMapper<T, T>();
                        mapper.Map(objectToUpdate, entity);

                        result = new OperationResult(true);
                    }
                }

                results.Add(result);
            }
            return results;
        }

        #endregion

        #region Implementation of IInserter<in T>

        public IEnumerable<OperationResult<string>> Create(IEnumerable<T> newObjects)
        {
            ParameterChecker.CheckForVoid(() => newObjects);

            var newObjArr = newObjects as T[] ?? newObjects.ToArray();
            HashSet<string> existingIds = new HashSet<string>();

            foreach (var newObj in newObjArr)
            {
                string id = _typeDescriptor.GetId(newObj);

                if (!string.IsNullOrEmpty(id))
                {
                    if (!existingIds.Add(id))
                    {
                        throw new DuplicateIdException("Attempting to create multiple objects with id " + id + " is not allowed");
                    }
                }

                if (_typeDescriptor.IsIdAutoGenerated)
                {
                    checkOrGenerateIdForEntity(id, newObj);
                }
            }

            List<OperationResult<string>> results = new List<OperationResult<string>>(newObjArr.Length);

            foreach (var newObj in newObjArr)
            {
                string id = _typeDescriptor.GetId(newObj);
                if (_objectDictionary.TryAdd(id, newObj))
                {
                    var successResult = new OperationResult<string> { Success = true, Value = id };
                    results.Add(successResult);
                }
                else
                {
                    string message = string.Format("Failed to create {0} with ID {1} because it already exists.", _typeDescriptor.TypeName, id);

                    Logger.Info(message);

                    var failResult = new OperationResult<string>
                    {
                        Success = false,
                        Value = null,
                        Messages = new[]
                                {
                                    new Message(Severity.Error, message)
                                }
                    };
                    results.Add(failResult);
                }
            }

            return results;
        }

        #endregion

        #region Implementation of IQueryable<T>

        public IEnumerable<T> Query(Expression<Func<T, bool>> query)
        {
            var queryableValues = _objectDictionary.Values.AsQueryable();
            var results = queryableValues.Where(query);
            return results;
        }

        #endregion

        private void checkOrGenerateIdForEntity(string id, T newObj)
        {
            if (String.IsNullOrEmpty(id))
            {
                string generatedId = _idProvider.GenerateNewId();
                _typeDescriptor.SetId(newObj, generatedId);
            }
            else if (!_idProvider.IsIdValid(id))
            {
                throw new IdFormatException(id + " is not a valid identifier (validated using " + _idProvider.GetType().Name + ")");
            }
        }
    }
}
