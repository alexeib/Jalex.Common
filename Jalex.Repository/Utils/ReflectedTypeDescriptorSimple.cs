using System;
using System.Linq;
using System.Reflection;
using Jalex.Infrastructure.Attributes;
using Jalex.Repository.Exceptions;

namespace Jalex.Repository.Utils
{
    public class ReflectedTypeDescriptorSimple
    {
        protected readonly Type _type;

        public string TypeName { get { return _type.Name; } }
        public bool IsIdAutoGenerated { get; private set; }
        public string IdPropertyName { get; private set; }
        public PropertyInfo[] Properties { get; private set; }

        public ReflectedTypeDescriptorSimple(Type type)
        {
            _type = type;

            Properties = _type.GetProperties(BindingFlags.Instance | BindingFlags.Public);
            bool isIdAutoGeneratedLocal;
            IdPropertyName = getIdPropertyName(Properties, out isIdAutoGeneratedLocal);
            IsIdAutoGenerated = isIdAutoGeneratedLocal;            
        }

        private static string getIdPropertyName(PropertyInfo[] classProps, out bool isAutoGenerated)
        {
            PropertyInfo idProperty;

            // try to get id propert through attribute annotation first
            var idPropertyAndAttribute = (from prop in classProps
                                          let idAttribute = (IdAttribute)prop.GetCustomAttributes(true).FirstOrDefault(a => a is IdAttribute)
                                          where idAttribute != null
                                          select new { Property = prop, IdAttribute = idAttribute }).FirstOrDefault();

            if (idPropertyAndAttribute != null)
            {
                idProperty = idPropertyAndAttribute.Property;
                isAutoGenerated = idPropertyAndAttribute.IdAttribute.IsAutoGenerated;
            }
            else
            {
                // if no attribute is present, try using convention
                idProperty = classProps.FirstOrDefault(m => RepositoryConstants.IdFieldNames.Contains(m.Name));
                isAutoGenerated = true;
            }

            if (idProperty == null)
            {
                throw new RepositoryException("Id property not found (must be one of " +
                                              string.Join(", ", RepositoryConstants.IdFieldNames) +
                                              "). Alternatively, set a IdAttribute on the key property.");
            }

            string idPropertyName = idProperty.Name;

            if (idProperty.PropertyType != typeof(string))
            {
                throw new RepositoryException("Id property " + idPropertyName + " must be of type string");
            }
            return idPropertyName;
        }
    }
}
